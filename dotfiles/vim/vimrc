"Vundle vimrc
set nocompatible              " be iMproved, required
filetype off                  " required

execute pathogen#infect()
syntax on
filetype plugin indent on

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
"
let g:ycm_confirm_extra_conf = 0

" let Vundle manage Vundle, required

Plugin 'VundleVim/Vundle.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'wavded/vim-stylus'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdcommenter'
Plugin 'chemzqm/vim-jsx-improve'
Plugin 'Valloric/MatchTagAlways'
Plugin 'sbdchd/neoformat'
Plugin 'frigoeu/psc-ide-vim'
call vundle#end()

filetype plugin indent on
filetype plugin on

let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1

" prettier
" Use formatprg when available
" let g:neoformat_try_formatprg = 1
" autocmd FileType javascript.jsx,javascript set formatprg=prettier\ --stdin\ --parser\ flow\ --single-quote\ --trailing-comma\ none
" uncomment the next line to have file formatted on save
" autocmd BufWritePre *.js Neoformat


" neobundle config
source ~/.vim/neobundle.vim

" custom key mappings
source ~/.vim/key_mappings.vim

NeoBundleLazy 'facebook/vim-flow', {
      \ 'autoload': {
      \     'filetypes': 'javascript'
      \ },
      \ 'build': {
      \     'mac': 'yarn global install flow-bin'
      \ }}

NeoBundleLazy 'Shougo/vimproc.vim', {
      \ 'build' : {
      \     'windows' : 'tools\\update-dll-mingw',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make',
      \     'linux' : 'make',
      \     'unix' : 'gmake',
      \    },
      \ }

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['eslint']

" @flow
let g:flow#enable = 1
let g:flow#autoclose = 1
let g:flow#timeout = 6
let g:flow#errjmp = 0

" nerdcommenter
let g:NERDSpaceDelims = 1
let g:NERDTrimTrailingWhiteSpace = 1
let g:NERDCommentEmptyLines = 0

let g:gitgutter_max_signs = 500  " default value

color jellybeans

" gvim
if has('gui_running')
  set guioptions-=L
  set guioptions-=r
  set guioptions-=T
  set guioptions-=m
  set guifont=hermit\ 12
  set background=dark
  color material-theme
endif

" vimfiler settings
let g:vimfiler_as_default_explorer = 1

syntax on

"autocmd FileType javascript setlocal omnifunc=tern#Complete

let g:indent_guides_enable_on_vim_startup = 0
" numbers
"autocmd FocusLost   * :set number
"autocmd FocusGained * :set relativenumber
autocmd InsertEnter * :set number
autocmd InsertLeave * :set relativenumber

set relativenumber
" cursor
let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode(

"Airline
let g:airline#extensions#tabline#enabled = 1
set laststatus=2
let g:airline_theme="badwolf"

" Rainbows
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" CommandT
set wildignore+=node_modules/**,_build/**,deps/**

" Cursor
if has('gui_running')
  au WinLeave * set nocursorline nocursorcolumn
  au WinEnter * set cursorline cursorcolumn
  set cursorline cursorcolumn
endif

set tabstop=2
set shiftwidth=2
set expandtab
set shell=/bin/sh

" Whitespace remove
au BufWritePre * :%s/\s\+$//e
"

"au Syntax * syn match TrailingWhitespace /\s\+$/
"match TrailingWhitespace /\s\+$/
" Removes trailing spaces
function! TrimWhiteSpace()
  %s/\s\+$//e
endfunction

noremap <silent> <Leader>rts :call TrimWhiteSpace()<CR>

"
"" FUNCTIONS
"
function! JSFormat()
  " Preparation: save last search, and cursor position.
  let l:win_view = winsaveview()
  let l:last_search = getreg('/')
  let fileWorkingDirectory = expand('%:p:h')
  let currentWorkingDirectory = getcwd()
  execute ':lcd' . fileWorkingDirectory
  execute ':silent' . '%!esformatter'
  if v:shell_error
    undo
    "echo "esformatter error, using builtin vim formatter"
    " use internal formatting command
    execute ":silent normal! gg=G<cr>"
  endif
  " Clean up: restore previous search history, and cursor position
  execute ':lcd' . currentWorkingDirectory
  call winrestview(l:win_view)
  call setreg('/', l:last_search)
endfunction


let g:jsx_ext_required = 0


set backspace=indent,eol,start

set noswapfile
